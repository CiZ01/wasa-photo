#TODO Sistemare tutte le regex
#TODO getMyStream
#TODO sistemare tutti i path ed evitare tante request body

openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: |
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment.
  version: 1.0.0

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "Profile"
    description: "Everything about your Profile"
  - name: "Post"
    description: "Everything about your Posts"

paths:
  #devo importare quello del prof
  #MANCA IL LOGIN
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        201:
          description: |
            A new account has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth: 
                    type: string
                    description: The user auth token.
                  my_identifier: { $ref: "#/components/schemas/UserId" }
        200:
          description: |
            Log-in succesfull.
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier: { $ref: "#/components/schemas/UserId" }
        400:
          description: |
            Formatting request invalid.
            Missing argument or username formatting is invalid.
          content:
            plain/text:
              example: Error

  /profile/setMyUserName:
    put:
      tags: ["Profile"]
      operationId: setMyUserName
      summary: Set my user name
      description: |-
        Set my user name
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 13
      responses:
        "200":
          description: Set user name successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Set user name failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/followUser:
    put:
      tags: ["Profile"]
      operationId: followUser
      summary: Follow user
      description: |-
        Follow user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          $ref: "#/components/schemas/Username"
          required: true

        
      responses:
        "200":
          description: Follow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Follow user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profile/unfollowUser:
    delete:
      tags: ["Profile"]
      operationId: unfollowUser
      summary: Unfollow user
      description: |-
        Unfollow user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          $ref: "#/components/schemas/Username"
          required: true
        
      responses:
        "200":
          description: Unfollow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Unfollow user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/banUser: 
    put:
      tags: ["Profile"]
      operationId: banUser
      summary: Ban user
      description: |-
        Ban user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          $ref: "#/components/schemas/Username"
          required: true
        
      responses:
        "200":
          description: Ban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Ban user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{userId}/unbanUser/{bannedUserId}:
    delete:
      tags: ["Profile"]
      operationId: unbanUser
      summary: Unban user
      description: |-
        Unban user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          $ref: "#/components/schemas/Username"
          required: true
        
      responses:
        "200":
          description: Unban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Unban user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  #penso che non ci sia problema se ritornare o no un profilo, visto che non esistono privati.
  /profile/getUserProfile:
    get: 
      tags: ["Profile"]
      operationId: getUserProfile
      summary: Get user profile
      description: |-
        Get user profile
      security:
        - bearerAuth: []
      parameters:
        - in: query
          $ref: "#/components/schemas/Username"
          required: true
        
      responses:
        "200":
          description: Get user profile successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Get user profile failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /post/uploadPhoto:
    post: 
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Upload photo
      description: |-
        Upload photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          'image/jpeg':
            schema:
              type: string
              format: binary
          'image/png':
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Upload photo successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Upload photo failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{userId}/post/{photoId}/likePhoto:
    put: 
      tags: ["Post"]
      operationId: likePhoto
      summary: Like photo
      description: |-
        Like photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                #così lato backend so direttamente come fare riferimento al post e incrementare i like
                userId: { $ref: "#/components/schemas/UserId" }
                photoId: { $ref: "#/components/schemas/PhotoId" }
                #E so che è stato questo utente
                fromUserId: { $ref: "#/components/schemas/UserId" }
      responses:
        "200":
          description: Liked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profile/{userId}/post/{photoId}/unlikePhoto:
    delete: 
      tags: ["Post"]
      operationId: unlikePhoto
      summary: Unlike photo
      description: |-
        Unlike photo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema: { $ref: "#/components/schemas/UserId" }
          required: true
        - in: path
          name: photoId
          schema: { $ref: "#/components/schemas/PhotoId" }
          required: true
      responses:
        "200":
          description: Unliked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /profile/{userId}/post/{photoId}/commentPhoto: 
    post: 
      tags: ["Post"]
      operationId: commentPhoto
      summary: Comment photo
      description: |-
        Comment photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { $ref: "#/components/schemas/UserId" }
                photoId: { $ref: "#/components/schemas/PhotoId" }
                comment: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment created successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentId: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    StatusInfo:
      title: Status Info
      type: object
      properties:
        status:
          type: string
          enum:
            - info
            - warning
            - critical
            - ""
        title: { type: string }
        message: { type: string }
        url: { type: string }
    UserId:
      title: User ID
      description: Numeric ID of the user
      type: string
      pattern: '[0-9]*'
      example: "00010"
      minLength: 5
      maxLength: 5
    Username: 
      title: Username
      description: Username of the user
      type: string
      pattern: '^[a-zA-Z]+$'
      example: "Maria"
      minLength: 3
      maxLength: 13
    User: 
      title: User
      description: User
      type: object
      properties:
        userId: { $ref: "#/components/schemas/UserId" }
        username: { $ref: "#/components/schemas/Username" }
    LikeList:
      title: Like List
      description: List of likes
      type: array
      items:
        type: object
        properties:
          user: { $ref: "#/components/schemas/User" }
    PhotoId:
      title: Photo ID
      description: Numeric ID of the photo
      type: string
      pattern: '[0-9]*'
      example: "00010"
      minLength: 5
      maxLength: 5
    Comment:
      title: Comment
      description: Comment of the photo
      type: object
      properties:
        fromUser: { $ref: "#/components/schemas/User" }
        text:
          type: string
          example: "Bella foto!"
          minLength: 1
          maxLength: 144
        timestamp: { type: string }
    CommentList:
      title: Comment List
      description: All comment of the photo
      type: array
      items:
        { $ref: "#/components/schemas/Comment" }
    Photo: 
      title: Photo
      description: Photo of the user
      type: object
      properties:
        photoId: { $ref: "#/components/schemas/PhotoId" }
        userId: { $ref: "#/components/schemas/UserId" }
        photo:
          type: string
          format: binary
        likes: { $ref: "#/components/schemas/LikeList" }
        comments: { $ref: "#/components/schemas/CommentList" }
        timestamp: { type: string }
 
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:    
      type: http
      scheme: bearer

      schema:
        type: string
        enum: [ios, android]
      name: X-App-Platform
      in: header
      required: true
      description: App operating system / platform
      allowEmptyValue: false
