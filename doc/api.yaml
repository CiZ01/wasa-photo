openapi: 3.0.3
info:
  title: Wasa Photo
  description: |-
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment.
  version: 1.0.0

servers:
  - url: "http://localhost:3000"

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "User"
    description: "Everything about your user"
  - name: "Post"
    description: "Everything about your Posts"

paths:
  /session:
    post:
      tags: [Login]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The username of the user who wants to login
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        "201":
          description: |-
            A new account has been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthUser" }
              example: { "user_id": 10, "auth": 10 }
        "200":
          description: |-
            Log-in succesfull.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AuthUser" }
              example: { "user_id": 10, "auth": 10 }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/username:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the user who want to change username
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: [User]
      summary: Set my new username
      description: |-
        Set new username for the user with the given user ID.
        If the new username is already taken, the request will fail.
        If the user is not authorized, the request will fail.
        If the username is not valid, the request will fail.
      operationId: setMyUserName
      security:
        - bearerAuth: []
      requestBody:
        description: New username to set.
        content:
          application/json:
            schema:
              description: The new username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        "200":
          description: Set new username successful
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }

  /profiles/{profile_user_id}/feed:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the user who want to change username
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }

    get:
      tags: ["User"]
      operationId: getMyStream
      summary: Get the user stream
      description: |-
        Get the user stream, return a list of posts sorted chronologically. See Post for more details.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get stream successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostsList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/followings/{target_user_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the followed user
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: target_user_id
        in: path
        description: The user Id of the user who want to follow
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      operationId: followUser
      summary: Follow user
      description: |-
        Follow the user with the target_user_id.
        <details>
        <summary> Status code info </summary>
        It returns 400 if the user is trying to follow himself
        It returns 400 if the user is already following the target user
        It returns 400 if the target user has banned the user
        It returns 500 if there is an error while checking if the user is already following the target user
        </details>
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            Follow user successful. <br>
            Return the user ID and username of the followed user.
          content:
            plain/text:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      tags: ["User"]
      operationId: unfollowUser
      summary: Unfollow user
      description: |-
        Unfollow the user with the given user ID and delete it from the follower list.
        <details>
        <summary> Status code info </summary>
        It return 200 if the user is unfollowed
        It return 400 if the user trying to unfollow himself
        It return 400 if the user is not followed
        It return 400 if the target user has banned the user
        It return 403 if the user is not authorized
        It return 500 if there is an internal error
        </details>
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            Unfollow user successful. <br>
            Return the user ID and the username of the unfollowed user.
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/followings:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the followed user
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }

    get:
      tags: ["User"]
      operationId: getMyFollowings
      summary: Get my followings
      description: |-
        Get the followings of the user with the given user ID.
        Return a list of users. See User for more details.
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Get followings successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/followers:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }

    get:
      tags: ["User"]
      operationId: getMyFollowers
      summary: Get my followers
      description: |-
        Get the followers of the user with the given user ID.
        Return a list of users. See User for more details.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get followers successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/bans/{target_user_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the banned user
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: target_user_id
        in: path
        description: The user Id of the user who want to ban
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      operationId: banUser
      summary: Ban user
      description: |-
        Ban the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            Ban user successful. <br>
            Return the user of the banned user. See User for more details.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      tags: ["User"]
      operationId: unbanUser
      summary: Unban user
      description: |-
        Unban the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            Unban user successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/bans:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the banned user
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }

    get:
      tags: ["User"]
      operationId: getMyBans
      summary: Get my bans
      description: |-
        Get the bans of the user with the given user ID.
        Return a list of users. See User for more details.
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Get bans successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the user whose profile you want to see
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    get:
      tags: ["User"]
      operationId: getUserProfile
      summary: Get user profile
      description: |-
        Get user profile
      security:
        - bearerAuth: []

      parameters:
        - { $ref: "#/components/parameters/Offset" }
        - { $ref: "#/components/parameters/Limit" }

      responses:
        "200":
          description: |-
            Get user profile successful. Return some information about the user.
            For posts list see /users/{usersID}/posts: get.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      tags: ["User"]
      operationId: deleteUser
      summary: Delete user
      description: |-
        Delete the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |-
            Delete user successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the posts.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    post:
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Upload photo and create a post.
      description: |-
        Upload the photo and save it in the storage server.
        The user can specify the caption of the post with a max length of 64 characters.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: |-
                The photo to upload and the caption of the post.
              type: object
              properties:
                caption: { $ref: "#/components/schemas/Caption" }
                file:
                  description: The photo to upload.
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 1000000

      responses:
        "201":
          description: Upload photo and created post successful.
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      tags: ["Post"]
      operationId: getPosts
      summary: Get posts
      description: |-
        Get the posts of the user with the given user ID
      security:
        - bearerAuth: []
      parameters:
        - { $ref: "#/components/parameters/Offset" }
        - { $ref: "#/components/parameters/Limit" }

      responses:
        "200":
          description: Get posts list successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostsList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: |-
          The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post Id of the post to delete
        schema: { $ref: "#/components/schemas/PostID" }
        required: true

    delete:
      tags: ["Post"]
      operationId: deletePhoto
      summary: Delete post
      description: |-
        Delete the specified post by post id from the storage server, 
        delete the post from user profile and delete all like and comment related to it.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Delete photo and post successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}/likes/{user_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id of the post to (un)like
        schema: { $ref: "#/components/schemas/PostID" }
        required: true
      - name: user_id
        in: path
        description: The user id of the user that (un)like the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["Post"]
      operationId: likePhoto
      summary: Like the post and add the user to the likes list of the post.
      description: |-
        Like post
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Liked successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete:
      tags: ["Post"]
      operationId: unlikePhoto
      summary: Unlike post
      description: |-
        Unlike the post and remove the user from the likes list of the post.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unliked successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}/likes:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post id of the post to (un)like
        schema: { $ref: "#/components/schemas/PostID" }
        required: true
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }

    get:
      tags: ["Post"]
      operationId: getLikes
      summary: Get the list of users who liked the post
      description: |-
        Get the list of users who liked the post, 
        the users object is composed by the user_id and the username.
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Get the list of users who liked the post
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}/comments:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post Id of the post to comment
        schema: { $ref: "#/components/schemas/PostID" }
        required: true

    post:
      tags: ["Post"]
      operationId: commentPhoto
      summary: Comment post
      description: |-
        Comment post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment created successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

    get:
      tags: ["Post"]
      operationId: getComments
      summary: Get a subset or all comments of a post
      description: |-
        Get a subset or all comments of a post. 
        It's possible to specify a range and limit of comments to get by using query parameters.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get comments successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentsList" }

        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}/comments/{comment_id}:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post Id of the post to comment
        schema: { $ref: "#/components/schemas/PostID" }
        required: true
      - name: comment_id
        in: path
        description: The comment Id of the comment to delete
        schema: { $ref: "#/components/schemas/CommentID" }
        required: true

    delete:
      tags: ["Post"]
      operationId: uncommentPhoto
      summary: Delete a comment from a post
      description: |-
        Delete the comment specified by ID in path from the post.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Comment deleted successful
          content:
            text/plain:
              schema: { $ref: "#/components/schemas/OK" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles:
    parameters:
      - name: search
        in: query
        description: The username (or a part of it) to search.
        schema:
          type: string
          minLength: 1
          maxLength: 13
          pattern: ^[a-z0-9_]{1,13}$
        required: true
      - name: from_follows
        in: query
        description: The search is limited to followers and followings.
        schema:
          type: boolean
          default: false
        required: false
      - { $ref: "#/components/parameters/Offset" }
      - { $ref: "#/components/parameters/Limit" }
    get:
      tags: ["User"]
      operationId: searchUsers
      summary: Get the list of profiles
      description: |-
        Get the list of Users that match with the username specified in the query.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get the list of profiles of the user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UsersList" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
       
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/bio:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the profile.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      operationId: setMyBio
      summary: Set the bio of the user
      description: |-
        Set the bio of the user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Bio" }
      responses:
        "200":
          description: Bio setted successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Bio" }
              example: { "bio": "Io sono Haru, ho 1 anno e sono un gatto 🐱" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/profile-picture:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the profile.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      operationId: setMyProfilePic
      summary: Set the profile picture of the user
      description: |-
        Set the profile picture of the user
      security:
        - bearerAuth: []
      requestBody:
        content:
          image/jpeg:
            schema:
              type: object
              description: The photo to upload.
              properties:
                file:
                  description: The photo to upload.
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 1000000
      responses:
        "200":
          description: Profile picture setted successful
          content:
            application/json:
              schema:
                type: object
                description: The url of the profile picture
                properties:
                  schema: { $ref: "#/components/schemas/Img64" }
                example:
                  {
                    "img_url": "https://www.example.com/storage/2/profile_pic_250x250.jpeg",
                  }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/reset-profile-picture:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the profile.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put:
      tags: ["User"]
      operationId: resetMyProfilePic
      summary: Set the profile picture of the user to the default one
      description: |-
        Set the profile picture of the user to the default one
      security:
        - bearerAuth: []

      responses:
        "200":
          description: Profile picture setted successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{profile_user_id}/posts/{post_id}/caption:
    parameters:
      - name: profile_user_id
        in: path
        description: The user Id of the owner of the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: post_id
        in: path
        description: The post Id of the post to comment
        schema: { $ref: "#/components/schemas/PostID" }
        required: true

    put:
      tags: ["Post"]
      operationId: changeCaption
      summary: Set the caption of the post
      description: |-
        Set the caption of the post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Caption" }
      responses:
        "200":
          description: Caption setted successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Caption" }
              example:
                { "caption": "Io sono Haru, ho 1 anno e sono un gatto 🐱" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

#---------------------------COMPONENTS--------------------------#

components:
  schemas:
    UserID:
      title: User id
      description: Numeric id of the user
      type: integer
      example: 10
      minimum: 1
    Username:
      title: Username
      description: Username of the user, not accepted upper case characters
      type: string
      pattern: ^[a-z0-9]{3,13}$
      example: "haru22"
      minLength: 3
      maxLength: 13
    User:
      title: User
      description: User
      type: object
      properties:
        user_id: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
        propic_64: { $ref: "#/components/schemas/Img64" }
    Profile:
      title: Profile
      description: Profile of the user
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        bio: { $ref: "#/components/schemas/Bio" }
        profile_pic: { $ref: "#/components/schemas/Img64" }
        followers_count:
          type: integer
          description: Number of followers
          example: 10
          minimum: 0
        followings_count:
          type: integer
          description: Number of followings
          example: 10
          minimum: 0
        posts_count:
          type: integer
          description: Number of posts
          example: 10
          minimum: 0
        is_followed:
          type: boolean
          description: True if the user is followed by the logged user
          example: true
    PostID:
      title: PostID
      description: |-
        The post id is used to identify a post.
        The post id is generated by the server and it's for each user.
      type: integer
      example: 100
      minimum: 1

    CommentID:
      title: CommentID
      description: |-
        The numeric id is generated by the server and it's unique for each comments in a post.
      type: integer
      example: 15
      minimum: 1
    Comment:
      title: Comment
      description: Comment of the post
      type: object
      properties:
        comment_id: { $ref: "#/components/schemas/CommentID" }
        owner_id: { $ref: "#/components/schemas/UserID" }
        user: { $ref: "#/components/schemas/User" }
        comment:
          type: string
          description: Text of the comment
          example: "Bella foto!"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
        timestamp: { $ref: "#/components/schemas/Timestamp" }
    CommentsList:
      title: Comment List
      description: All comment of the post
      type: array
      items: { $ref: "#/components/schemas/Comment" }
      minItems: 0
      maxItems: 100
    Post:
      title: Post
      description: The post is a collection of post, like count and comment cou. Contain a timestamp.
      type: object
      properties:
        photo64: { $ref: "#/components/schemas/Img64" }
        caption: { $ref: "#/components/schemas/Caption" }
        likes_count:
          type: integer
          description: Number of likes of the post.
          minimum: 0
        comments_count:
          type: integer
          description: Number of comments of the post.
          minimum: 0
        is_liked:
          type: boolean
          description: True if the post is liked by the logged user
          example: true
        timestamp: { $ref: "#/components/schemas/Timestamp" }
    PostsList:
      title: Posts List
      description: List of posts
      type: array
      items: { $ref: "#/components/schemas/Post" }
      minItems: 0
      maxItems: 100
    Caption:
      title: Caption
      description: Caption of the post
      type: object
      properties:
        caption:
          type: string
          description: Caption of the post.
          example: "Foto al lago con Haru"
          pattern: '^[^\/\\]{1,100}$'
          minLength: 0
          maxLength: 64
    UsersList:
      title: Users List
      description: |-
        A list of users for many responses.
        It's used to get a list of users for the search, follower and followings lists, banned users list and likes list.
      type: array
      items:
        type: object
        description: User
        properties:
          user: { $ref: "#/components/schemas/User" }
          pro_pic: { $ref: "#/components/schemas/Img64" }
      minItems: 0
      maxItems: 100
    Bio:
      title: Bio
      description: Bio of the user
      type: object
      properties:
        text:
          type: string
          description: Text of the bio
          example: "Io sono Haru, ho 1 anno e sono un gatto 🐱"
          pattern: '^[^\/\\]{1,64}$'
          minLength: 1
          maxLength: 64
    Auth:
      title: Auth
      description: The authorization code is the user_id.
      type: integer
      example: 10
      minimum: 1
    AuthUser:
      title: AuthUser
      description: The authorization code is the user_id.
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        auth: { $ref: "#/components/schemas/Auth" }
      example: { "user_id": 10, "auth": 10 }
    OK:
      title: OK
      description: The succesfull response from server.
      type: string
      example: "OK, action successfully completed"
      minLength: 2
      maxLength: 200
    Img64:
      title: Img64
      description: base 64 image.
      type: string
      format: byte
    Timestamp:
      title: Timestamp
      description: The timestamp of the post.
      type: string
      format: date-time
      pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
      example: "2020-12-31T23:59:59"
      minLength: 19
      maxLength: 19

  responses:
    #400
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
      content:
        text/plain:
          schema:
            description: BadRequest
            type: string
            example: "Bad Request"
            minLength: 11
            maxLength: 30

    #401
    Unauthorized:
      description: The access token is missing or it's expired.
      content:
        text/plain:
          schema:
            description: Unauthorized
            type: string
            example: "Unauthorized"
            minLength: 12
            maxLength: 30

    #403
    Forbidden:
      description: The user is not allowed to perform the action.
      content:
        text/plain:
          schema:
            description: Forbidden
            type: string
            example: "Forbidden"
            minLength: 9
            maxLength: 30

    #500
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
      content:
        text/plain:
          schema:
            description: InternalServerError
            type: string
            example: "Internal Server Error"
            minLength: 21
            maxLength: 30
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    Offset:
      name: offset
      in: query
      description: |-
        The start index of the elements to get. <br>
        <details> 
        <summary> Other details </summary>
        If the value is **not specified**, it will be set to 0. <br>
        If the value is **greater than** the number of elements, an empty array will be returned. <br>
        If the value is **negative**, it will be set to 0. <br>
        If the value is **not an integer**, it will be set to 0.
        </details>
      schema: { type: integer, default: 0, minimum: 0 }
      required: false
    Limit:
      name: limit
      in: query
      description: |-
        The maximum number of elements to get. <br>
        <details> 
        <summary> Other details </summary>
        If the value is **not specified**, it will be set to 10. <br>          
        If the value is **greater than 100**, it will be set to 100. <br>
        If the value is **less than 1**, it will be set to 10. <br>
        If the value is **not an integer**, it will be set to 10. <br>
        If the value is **greater than** the number of elements, it will be set to the total number of elements. 
        </details>
      schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
      required: false
