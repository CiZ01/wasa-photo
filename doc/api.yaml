openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: |
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment. 
    
  version: 1.0.0

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "User"
    description: "Everything about your user"
  - name: "Post"
    description: "Everything about your Posts"

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              description: The username of the user who wants to login
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        "201":
          description: |
            A new account has been created.
          content:
            application/json:
              schema:
                description: The user authorization and the userID. Both strings are the same thing.
                type: object
                properties:
                  auth: { $ref: "#/components/schemas/Auth" }
                  user: { $ref: "#/components/schemas/User" }
        "200":
          description: |
            Log-in succesfull.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth: { $ref: "#/components/schemas/Auth" }
                  userID: { $ref: "#/components/schemas/UserID" }
        "400":
          description: |
            Formatting request invalid.
            Missing argument or username formatting is invalid
          content:
            plain/text:
              schema:
                type: string
                example: Error

  /users/{userID}/username:
    parameters:
    - name: userID 
      in: path
      description: The user Id of the user who want to change username
      schema: { $ref: "#/components/schemas/UserID" }      
      required: true
      
    put:
      tags: ["User"]
      operationId: setMyUserName
      summary: Set my user name
      description: |-
        Set my user name
      security:
        - bearerAuth: []
      requestBody:
        description: New username to set.
        content:
          application/json:
            schema:
              description: The new username of the user
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        "200":
          description: Set user name successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/feed: 
    parameters:
      - name: userID 
        in: path
        description: The user Id of the user who want to get his stream
        schema: { $ref: "#/components/schemas/UserID" }      
        required: true
      - name: start
        in: query
        description: |
          The start index of the posts to get. <br>
          <details> 
          <summary> Other details </summary>
          If not specified, the value will be set to 0. <br>
          If the value is greater than the number of posts, an empty array will be returned. <br>
          If the value is negative, it will be set to 0. <br>
          If the value is not an integer, it will be set to 0.
          </details>
        schema: { type: integer, default: 0, minimum: 0 }
        required: false 
      - name: limit
        in: query
        description: |
          The number of posts to get. <br>
          <details> 
          <summary> Other details </summary>
          If the value is **greater than 50**, it will be set to 50. <br>
          If the value is less than 1, it will be set to 10. <br>
          If the value is not specified, it will be set to 10. <br>
          If the value is not an integer, it will be set to 10. <br>
          If the value is greater than the number of posts, it will be set to the number of posts. 
          </details>
        schema: { type: integer, default: 10, minimum: 1, maximum: 50 }
        required: false

    get: 
      tags: ["User"]
      operationId: getMyStream
      summary: Get the user stream
      description: |-
        Get the user stream, return a list of posts sorted chronologically. See Post for more details.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get stream successful
          content:
            application/json:
              schema:
                type: array
                items:
                  { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/follow/{targetUserID}:
    parameters:
    - name: targetUserID
      in: path
      description: The user Id of the user to (un)follow.
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to (un)follow
      schema: { $ref: "#/components/schemas/UserID" }
      required: true

    put:
      tags: ["User"]
      operationId: followUser
      summary: Follow user
      description: |-
        Follow the user with the given user ID.
      security:
        - bearerAuth: [] 
      responses:
        "200":
          description: Follow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      tags: ["User"]
      operationId: unfollowUser
      summary: Unfollow user
      description: |-
        Unfollow the user with the given user ID and delete it from the follower list. 
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unfollow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/ban/{targetUserID}: 
    parameters:
    - name: targetUserID 
      in: path
      description: The user Id of the user to (un)ban
      schema : { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to (un)ban
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    
    put:
      tags: ["User"]
      operationId: banUser
      summary: Ban user
      description: |-
        Ban the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Ban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      tags: ["User"]
      operationId: unbanUser
      summary: Unban user
      description: |-
        Unban the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  
  #penso che non ci sia problema se ritornare o no un profilo, visto che non esistono privati.
  /users/{userID}/profile/{profileUserID}:
    parameters:
    - name: profileUserID
      in: path
      description: The user Id of the user whose profile you want to see
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to see the profile
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
      
    get: 
      tags: ["User"]
      operationId: getUserProfile
      summary: Get user profile
      description: |-
        Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: |
            Get user profile successful. Return some information about the user.
            For posts list see /users/{usersID}/posts: get.
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{userID}/posts/upload:
    parameters:
      - name: userID
        in: path
        description: The user Id of the user who wants to add/delete the post.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    post: 
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Upload photo and create a post.
      description: |-
        Upload the photo and save it in the storage server.
        The user can specify the caption of the post with a max length of 64 characters.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                caption: 
                  type: string
                  pattern: ".{1,64}"
                  minLength: 1
                  maxLength: 64
                file:
                  type: string
                  format: binary
      
      responses:
        "201":
          description: Upload photo and created post successful.
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/posts/{uniquePostID}/delete:
    parameters:
    - name: userID
      in: path
      description: |
        The user Id of the user who wants to delete the post.
        Only the owner of the post can delete it
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    - name: uniquePostID
      in: path
      description: The unique post Id of the post to delete
      schema: { $ref: "#/components/schemas/UniquePostID" }
      required: true
      
    delete: 
      tags: ["Post"]
      operationId: deletePhoto
      summary: Delete post
      description: |-
        Delete the specified post by unique post id from the storage server, 
        delete the post from user profile and delete all like and comment related to it.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Delete photo and post successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/posts:
    parameters: 
      - name: userID
        in: path
        description: The user Id of the user whose posts you want to see
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: start
        in: query
        description: |
          The start index of the posts to get. <br>
          <details> 
          <summary> Other details </summary>
          If the value is **not specified**, it will be set to 0. <br>
          If the value is **greater than** the number of posts, an empty array will be returned. <br>
          If the value is **negative**, it will be set to 0. <br>
          If the value is **not an integer**, it will be set to 0.
          </details>
        schema: { type: integer, default: 0, minimum: 0 }
        required: false
      - name: limit
        in: query
        description: |
          The number of posts to get. <br>
          <details> 
          <summary> Other details </summary>
          If the value is **greater than 50**, it will be set to 50. <br>
          If the value is **less than 1**, it will be set to 10. <br>
          If the value is **not specified**, it will be set to 10. <br>
          If the value is **not an integer**, it will be set to 10. <br>
          If the value is **greater than the number of posts**, it will be set to the number of posts. 
          </details>
        schema: { type: integer, default: 10, minimum: 1, maximum: 50 }
        required: false


    get:
      tags: ["Post"]
      operationId: getPosts
      summary: Get posts
      description: |-
        Get the posts of the user with the given user ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get posts list successful
          content:
            application/json:
              schema:
                type: array
                items:
                  { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/posts/{uniquePostID}/like:
    parameters:
      - name : userID
        in: path 
        description: The user Id of the user who wants to (un)like the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: uniquePostID
        in: path
        description: The unique post id of the post to (un)like
        schema: { $ref: "#/components/schemas/UniquePostID" }
        required: true

    put: 
      tags: ["Post"]
      operationId: likePhoto
      summary: Like the post and add the user to the likes list of the post.
      description: |-
        Like post
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Liked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete: 
      tags: ["Post"]
      operationId: unlikePhoto
      summary: Unlike post
      description: |-
        Unlike the post and remove the user from the likes list of the post.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unliked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: '#/components/responses/InternalServerError' }
  
  /users/{userID}/posts/{uniquePostID}/likes:
    parameters:
      - name: userID
        in: path
        description: The user Id of the user who wants to see the list of users who liked the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: uniquePostID
        in: path
        description: The unique post id of the post to see the list of users who liked it
        schema: { $ref: "#/components/schemas/UniquePostID" }
        required: true

      - name: start
        in: query
        description: |
          The start index of the likes to get. <br>
          <details> 
          <summary> Other details </summary>
          If the value is **not specified**, it will be set to 0. <br>
          If the value is **greater than** the number of likes, an empty array will be returned. <br>
          If the value is **negative**, it will be set to 0. <br>
          If the value is **not an integer**, it will be set to 0.
          </details>
        schema: { type: integer, default: 0, minimum: 0 }
        required: false
      - name: limit
        in: query
        description: |
          The number of likes to get. <br>
          <details> 
          <summary> Other details </summary>
          If the value is **not specified**, it will be set to 20. <br>
          If the value is **greater than 100**, it will be set to 100. <br>
          If the value is **less than 1**, it will be set to 20. <br>
          If the value is **not an integer**, it will be set to 20. <br>
          If the value is **greater than the number of likes**, it will be set to the number of likes. 
          </details>
        schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        required: false
    get: 
      tags: ["Post"]
      operationId: getLikes
      summary: Get the list of users who liked the post
      description: |-
        Get the list of users who liked the post, 
        the users object is composed by the userID and the username.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get the list of users who liked the post
          content:
            application/json:
              schema:
                type: array
                items:
                  { $ref: "#/components/schemas/User" } 
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/posts/{uniquePostID}/comment: 
    parameters:
      - name : userID
        in: path 
        description: The user Id of the user who wants to comment the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: uniquePostID
        in: path
        description: The unique post Id of the post to comment
        schema: { $ref: "#/components/schemas/UniquePostID" }
        required: true
    
    post: 
      tags: ["Post"]
      operationId: commentPhoto
      summary: Comment post
      description: |-
        Comment post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment created successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentID: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete: 
      tags: ["Post"]
      operationId: deleteCommentPhoto
      summary: Delete a comment from a post
      description: |-
        Delete the comment specified by ID in query from the post.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Comment deleted successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{userID}/posts/{uniquePostID}/comments:
    parameters:
      - name : userID
        in: path 
        description: The user Id of the user who wants to get the comments of the post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: uniquePostID
        in: path
        description: The unique post Id of the post to get the comments
        schema: { $ref: "#/components/schemas/UniquePostID" }
        required: true
      - name: start
        in: query
        description: | 
          The start index of the comments to get. <br>
          <details>
          <summary> Other details </summary>
          If the value is **not specified**, it will be set to 0. <br>
          If the value is **greater than** the number of comments, an empty array will be returned.
          If the value is **negative**, the default value is 0. <br>
          If the value is **not a integer**, the default value is 0.
          </details>
        schema: { type: integer, default: 0, minimum: 0 }
        required: false 
      - name: limit
        in: query
        description: |
          The number of comments to return. <br>
          <details>
          <summary>Other details</summary>
          If the value is **not specified**, it will be set to 20. <br>
          If the value is **greater than 100**, it will be set to 100. <br>
          If the value is **less than 1**, it will be set to 20. <br>
          If the value is **not a integer**, it will be set to 20. <br>
          If the value is **greater than** the number of comments, it will be set to the number of comments.
          </details>
        #il default value è da capire in base a quanti commenti entrano in una schermata
        schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        required: false

    get: 
      tags: ["Post"]
      operationId: getComments
      summary: Get a subset or all comments of a post
      description: |-
        Get a subset or all comments of a post. 
        It's possible to specify a range and limit of comments to get by using query parameters.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get comments successful
          content:
            application/json:
              schema:
                type: array
                items:
                  { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  

#---------------------------COMPONENTS--------------------------#

components:
  schemas:
    UserID:
      title: User id
      description: Numeric id of the user
      type: string
      pattern: '^[0-9]{5}$'
      example: "00010"
      minLength: 5
      maxLength: 5
    Username: 
      title: Username
      description: Username of the user, not accepted upper case characters
      type: string
      pattern: '^[a-z0-9._]{3,13}$'
      example: "haru_22"
      minLength: 3
      maxLength: 13
    User: 
      title: User
      description: User
      type: object
      properties:
        userID: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
    Profile:
      title: Profile
      description: Profile of the user
      type: object
      properties:
        user: { $ref: "#/components/schemas/User" }
        #bio: { $ref: "#/components/schemas/Bio" }
        #profilePic: { $ref: "#/components/schemas/ProfilePic" }
        #followers: { $ref: "#/components/schemas/Followers" }
        #following: { $ref: "#/components/schemas/Following" }
        #non ritorna posts, i posts verrano ritornati con un'altra chiamata
    LikeList:
      title: Like List
      description: List of likes
      type: array
      items:
        { $ref: "#/components/schemas/User" }
    UniquePostID: 
      title: UniquePostID 
      description: |
        The unique post id is used to identify a post.
        The unique post id is the combination of the user id and post id.
        The post id is generated by the server and it's unique for each user.
      type: string
      pattern: '^[0-9]{5}[a-zA-Z]{3}$'
      example: "00010aAz"
      minLength: 8
      maxLength: 8
    Comment:
      title: Comment
      description: Comment of the post
      type: object
      properties:
        CommentID:
          type: string
          description: |
            The comment id is the combination of the user id and a numeric id.
            The numeric id is generated by the server and it's unique for each user.
          pattern: '^[0-9]{5}[0-9]{2}$'
          example: "000100"
          minLength: 7
          maxLength: 7
        text:
          type: string
          example: "Bella foto!"
          pattern: '^.{1,100}$'
          minLength: 1
          maxLength: 100
        timestamp: 
          type: string
          format: date-time 
    CommentsList:
      title: Comment List
      description: All comment of the post
      type: array
      items:
        { $ref: "#/components/schemas/Comment" }
    Post: 
      title: Post
      description: The post is a collection of post, like count and comment cou. Contain a timestamp.
      type: object
      properties:
        uniquePostID: { $ref: "#/components/schemas/UniquePostID" }
        photoURL: 
          type: string
          format: uri
          #vorrei usare l'estensione webp
          pattern: '^https:\/\/[a-zA-Z.-_\/]*\/[0-9]{5}\/[a-zA-Z]{3}\.jpg$'
          example: "https://www.example.com/users/00001/posts/aAk.jpg"
        caption:
          type: string
          example: "Foto al lago con Haru"
          pattern: '^[^\/\\]{1,100}$'
          minLength: 0
          maxLength: 100
        likesCount: 
          type: number
          format: int32
          minimum: 0
        commentsCount:
          type: number
          format: int32
          minimum: 0 
        timestamp: 
          type: string
          format: date-time 
    Auth:
      title: Auth
      description: The authorization code is the userID. 
      type: string
      pattern: "^[0-9]{5}$"
      example: "00010"
      minLength: 5
      maxLength: 5

  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:    
      type: http
      scheme: bearer