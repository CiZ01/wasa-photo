openapi: 3.0.3
servers:
  - url: "http://localhost:3000"
info:
  title: Wasa Photo
  description: |
    Wasa Photo is a photo sharing platform. It allows users to upload photo of their best moment. 
    
  version: 1.0.0

tags:
  - name: "Login"
    description: "Everything about your session"
  - name: "User"
    description: "Everything about your user"
  - name: "Post"
    description: "Everything about your Posts"

paths:
  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { $ref: "#/components/schemas/Username" }
        required: true
      responses:
        201:
          description: |
            A new account has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth: 
                    type: string
                    description: The user auth token.
                  userID: { $ref: "#/components/schemas/UserID" }
        200:
          description: |
            Log-in succesfull.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth: 
                    type: string
                    description: The user auth token.
                  userID: { $ref: "#/components/schemas/UserID" }
        400:
          description: |
            Formatting request invalid.
            Missing argument or username formatting is invalid.
          content:
            plain/text:
              example: Error

  /user/{userID}/setMyUserName:
    put:
      tags: ["User"]
      operationId: setMyUserName
      summary: Set my user name
      description: |-
        Set my user name
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          description: The new username of the user (must be unique)
          required: true
          schema: { $ref: "#/components/schemas/Username" }
        - name: userID 
          in: path
          description: The user Id of the user whose username is to be changed
          required: true
          schema: { $ref: "#/components/schemas/UserID" }

      responses:
        "200":
          description: Set user name successful

        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Set user name failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/followUser:
    parameters:
    - name: targetUserID
      in: query
      description: The user Id of the user to (un)follow.
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to (un)follow
      schema: { $ref: "#/components/schemas/UserID" }
      required: true

    put:
      tags: ["User"]
      operationId: followUser
      summary: Follow user
      description: |-
        Follow user
      security:
        - bearerAuth: [] 
      responses:
        "200":
          description: Follow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Follow user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      tags: ["User"]
      operationId: unfollowUser
      summary: Unfollow user
      description: |-
        Unfollow user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unfollow user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Unfollow user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/banUser/{targetUserID}: 
    parameters:
    - name: targetUserID 
      in: path
      description: The user Id of the user to (un)ban
      schema : { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to (un)ban
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    
    put:
      tags: ["User"]
      operationId: banUser
      summary: Ban user
      description: |-
        Ban user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Ban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Ban user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    delete:
      tags: ["User"]
      operationId: unbanUser
      summary: Unban user
      description: |-
        Unban user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unban user successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Unban user failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  
  #penso che non ci sia problema se ritornare o no un profilo, visto che non esistono privati.
  /user/{userID}/getUserProfile/{profileUserID}:
    parameters:
    - name: profileUserID
      in: path
      description: The user Id of the user whose profile you want to see
      schema: { $ref: "#/components/schemas/UserID" }
      required: true
    - name: userID 
      in: path
      description: The user Id of the user who wants to see the profile
      required: true
      schema: { $ref: "#/components/schemas/UserID" }
      
    get: 
      tags: ["User"]
      operationId: getUserProfile
      summary: Get user profile
      description: |-
        Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Get user profile successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Get user profile failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /user/{userID}/post/uploadPhoto:
    parameters:
      - name: userID
        in: path
        description: The user Id of the user who wants to add/delete the photo.
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    post: 
      tags: ["Post"]
      operationId: uploadPhoto
      summary: Upload photo
      description: |-
        Upload the photo and save it in the storage server.
        The user can specify the caption of the photo with a max length of 64 characters.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                caption: 
                  type: string
                  minLength: 0
                  maxLength: 64
                file:
                  type: string
                  format: binary
      
      responses:
        "200":
          description: Upload photo successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Upload photo failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/post/{photoID}/deletePhoto:
    parameters:
    - name: photoID
      in: query
      description: The photo Id of the photo to delete
      schema: { $ref: "#/components/schemas/PhotoID" }
      required: true
      
    delete: 
      tags: ["Post"]
      operationId: deletePhoto
      summary: Delete photo
      description: |-
        Delete the specified photo by photoID from the storage server, 
        delete the post from user profile and delete all like and comment related to the post.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Delete photo successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Delete photo failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }


  /user/{userId}/post/{photoId}/likePhoto:
    parameters:
      - name : userID
        in: path 
        description: The user Id of the owner post
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: photoID
        in: path
        description: The photo Id of the photo to (un)like
        schema: { $ref: "#/components/schemas/PhotoID" }
        required: true
        #con questo parametro so chi mette like
      - name: fromUserID
        in: query
        description: The user Id of the user who wants to (un)like the photo
        schema: { $ref: "#/components/schemas/UserID" }
        required: true

    put: 
      tags: ["Post"]
      operationId: likePhoto
      summary: Like the photo and add the user to the likes list of the photo.
      description: |-
        Like photo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

    delete: 
      tags: ["Post"]
      operationId: unlikePhoto
      summary: Unlike photo
      description: |-
        Unlike the photo and remove the user from the likes list of the photo.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Unliked successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /user/{userID}/post/{photoID}/commentPhoto: 
    post: 
      tags: ["Post"]
      operationId: commentPhoto
      summary: Comment photo
      description: |-
        Comment photo
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userID: { $ref: "#/components/schemas/UserID" }
                photoID: { $ref: "#/components/schemas/PhotoID" }
                comment: { $ref: "#/components/schemas/Comment" }
      responses:
        "201":
          description: Comment created successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentID: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{userID}/photo/{photoID}/deleteCommentPhoto: 
    delete: 
      tags: ["Post"]
      operationId: deleteCommentPhoto
      summary: Delete a comment from a post
      description: |-
        Delete the comment specified by ID in query from the post.
      security:
        - bearerAuth: []
      parameters:
        - name: userID 
          in: path
          description: |
            The user Id of the user who wants to delete the comment. 
            Only the owner post can delete comments.
          schema: { $ref: "#/components/schemas/UserID" }
          required: true
        - name: photoID
          in: query
          description: The photo Id of the photo whose comment you want to delete.
          schema: { $ref: "#/components/schemas/PhotoID" }
          required: true
      responses:
        "200":
          description: Comment deleted successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Post failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    StatusInfo:
      title: Status Info
      type: object
      properties:
        status:
          type: string
          enum:
            - info
            - warning
            - critical
            - ""
        title: { type: string }
        message: { type: string }
        url: { type: string }
    UserID:
      title: User id
      description: Numeric id of the user
      type: string
      pattern: '^[0-9]{5}$'
      example: "00010"
      minLength: 5
      maxLength: 5
    Username: 
      title: Username
      description: Username of the user
      type: string
      pattern: '^[a-z0-9._]{3,13}$'
      example: "Maria"
      minLength: 3
      maxLength: 13
    User: 
      title: User
      description: User
      type: object
      properties:
        userID: { $ref: "#/components/schemas/UserID" }
        username: { $ref: "#/components/schemas/Username" }
    LikeList:
      title: Like List
      description: List of likes
      type: array
      items:
        type: object
        properties:
          user: { $ref: "#/components/schemas/User" }
    #possibile idea è quella di unire il photoid e lo user id, per averli tutti in una volta
    PhotoID:
      title: Photo id
      description: Numeric id of the photo
      type: string
      pattern: '^[a-zA-Z]{3}$'
      example: "001"
      minLength: 3
      maxLength: 3
    Comment:
      title: Comment
      description: Comment of the photo
      type: object
      properties:
        fromUser: { $ref: "#/components/schemas/User" }
        text:
          type: string
          example: "Bella foto!"
          minLength: 1
          maxLength: 144
        timestamp: { type: string }
    CommentList:
      title: Comment List
      description: All comment of the photo
      type: array
      items:
        { $ref: "#/components/schemas/Comment" }
    Photo: 
      title: Photo
      description: Photo of the user
      type: object
      properties:
        photoID: { $ref: "#/components/schemas/PhotoID" }
        userID: { $ref: "#/components/schemas/UserID" }
        photo:
          type: string
          format: binary
        likes: { $ref: "#/components/schemas/LikeList" }
        comments: { $ref: "#/components/schemas/CommentList" }
        timestamp: { type: string }
 
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:    
      type: http
      scheme: bearer